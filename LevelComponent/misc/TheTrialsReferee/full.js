{
	"_id": "57431cd9f2770320c70fb43c",
	"slug": "thetrialsreferee",
	"searchStrings": "the trials referee t th the thet thetr thetri thetria thetrial thetrials thetrialsr thetrialsre thetrialsref thetrialsrefe thetrialsrefer",
	"name": "TheTrialsReferee",
	"js": "var TheTrialsReferee, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nTheTrialsReferee = (function(_super) {\n  __extends(TheTrialsReferee, _super);\n\n  function TheTrialsReferee() {\n    _ref = TheTrialsReferee.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  TheTrialsReferee.className = 'TheTrialsReferee';\n\n  TheTrialsReferee.prototype.chooseAction = function() {\n    var oracle, wave, _ref1;\n    this.checkVictory();\n    this.newGame = (_ref1 = !this.events['trial1_started'] && !this.events['trial2_started'] && !this.events['trial3_started']) != null ? _ref1 : {\n      \"true\": false\n    };\n    if (this.eventConditions('greeting')) {\n      return this.say(\"Brave adventurer, you are about to begin the trials of Mordrath\");\n    } else if (this.eventConditions('trial1_intro1')) {\n      if (!this.events['trial1_intro1']) {\n        this.events['trial1_intro1'] = this.world.age;\n        this.spawnMushrooms(this.spawnLocations.trial1);\n      }\n      return this.say(\"To begin the first trial, pick all of the mushrooms around the Oasis of Marr.\");\n    } else if (this.eventConditions('trial1_intro2')) {\n      if (!this.events['trial1_intro2']) {\n        this.events['trial1_intro2'] = this.world.age;\n      }\n      return this.say(\"This will gain the attention of the gods and force them to respond.\");\n    } else if (this.eventConditions('trial1_prep')) {\n      this.events['trial1_started'] = this.world.age;\n      this.heroHeal();\n      return this.say(\"You have awakened the old gods, prepare yourself for combat!\");\n    } else if (this.eventConditions('trial1_started')) {\n      wave = this.waves.trial1[0];\n      if (wave && (this.world.age - this.events['trial1_started'] >= wave.time)) {\n        this.spawnWave(wave);\n        return this.waves.trial1.shift();\n      }\n    } else if (this.eventConditions('trial1_complete')) {\n      if (this.enemiesCleared()) {\n        this.completed['trial1'] = true;\n        this.say(\"Well done, Champion. You have beaten the first Trial. The Oasis of Anele awaits you\");\n        return this.spawnMushrooms(this.spawnLocations.trial2);\n      }\n    } else if (this.eventConditions('trial2_prep')) {\n      this.events['trial2_started'] = this.world.age;\n      this.heroHeal();\n      return this.say(\"You have gained the attention of the gods, prepare yourself for combat!\");\n    } else if (this.eventConditions('trial2_started')) {\n      wave = this.waves.trial2[0];\n      if (wave && this.world.age - this.events['trial2_started'] >= wave.time) {\n        this.spawnWave(wave);\n        return this.waves.trial2.shift();\n      }\n    } else if (this.eventConditions('trial2_complete')) {\n      if (this.enemiesCleared()) {\n        this.completed['trial2'] = true;\n        this.say(\"Congratulations for besting the second trial. Proceed to the Temple of Mirth\");\n        return this.spawnMushrooms(this.spawnLocations.trial3);\n      }\n    } else if (this.eventConditions('trial3_prep')) {\n      this.events['trial3_started'] = this.world.age;\n      this.heroHeal();\n      return this.say(\"You are really upsetting the balance now, ready yourself!\");\n    } else if (this.eventConditions('trial3_started')) {\n      wave = this.waves.trial3[0];\n      if (wave && this.world.age - this.events['trial3_started'] >= wave.time) {\n        this.spawnWave(wave);\n        return this.waves.trial3.shift();\n      }\n    } else if (this.eventConditions('trial3_complete')) {\n      if (this.enemiesCleared()) {\n        this.completed['trial3'] = true;\n      }\n      if (!this.allEnemiesCleared()) {\n        return this.say(\"You can not awaken the Oracle until you have dispatched all of her minions!\");\n      }\n    } else if (this.completed['trial3'] && this.allEnemiesCleared() && !this.events.bossAwakened) {\n      this.events.bossAwakened = true;\n      this.events['bossSpawn'] = this.world.age;\n      this.hero.health = this.hero.maxHealth;\n      return this.say(\"Oh no, can you hear that? You have awaken something powerful and ancient!\");\n    } else if (this.eventConditions('bossSpawn')) {\n      this.events.bossEngaged = true;\n      oracle = this.world.getThangByID('Oracle of Zha');\n      oracle.say(\"All my beautiful children! You will die infidel!\");\n      oracle.appearanceDelay = 0;\n      return this.say(\"I have healed you for the final battle. Defeat the Oracle!\");\n    } else if (this.newGame) {\n      return this.say(\"\");\n    }\n  };\n\n  TheTrialsReferee.prototype.setUpLevel = function() {\n    this.hero = this.world.getThangByID('Hero Placeholder');\n    this.overseer = this.world.getThangByID('Trial Master');\n    this.overseer.isAttackable = false;\n    this.completed = {\n      'trial1': false,\n      'trial2': false,\n      'trial3': false\n    };\n    this.events = {\n      'trial1_started': false,\n      'trial2_started': false,\n      'trial3_started': false,\n      'trial1_intro1': false,\n      'trial1_intro2': false,\n      'bossAwakened': false,\n      'bossSpawn': false,\n      'bossEngaged': false\n    };\n    this.eventDurations = {\n      \"default\": {\n        time: 3\n      }\n    };\n    this.enemyUnits = {\n      M: ['ogre-munchkin-f', 'ogre-munchkin-m'],\n      C: ['ogre-scout-f', 'ogre-scout-m'],\n      T: ['ogre-thrower'],\n      O: ['oasis-guardian'],\n      S: ['ogre-shaman'],\n      F: ['ogre-f']\n    };\n    this.world.getSystem('Existence').buildTypePower['oasis-guardian'] = 49.8;\n    this.waves = {\n      'trial1': [\n        {\n          time: 6,\n          units: 'MCM'\n        }, {\n          time: 12,\n          units: 'CMTM'\n        }, {\n          time: 18,\n          units: 'MCMTS'\n        }, {\n          time: 27,\n          units: 'MCTCM'\n        }, {\n          time: 39,\n          units: 'MTO'\n        }\n      ],\n      'trial2': [\n        {\n          time: 6,\n          units: 'MCM'\n        }, {\n          time: 12,\n          units: 'CMTM'\n        }, {\n          time: 18,\n          units: 'MCMTS'\n        }, {\n          time: 27,\n          units: 'MCTCM'\n        }, {\n          time: 39,\n          units: 'MTO'\n        }\n      ],\n      'trial3': [\n        {\n          time: 6,\n          units: 'MCM'\n        }, {\n          time: 12,\n          units: 'CMTM'\n        }, {\n          time: 18,\n          units: 'MCMTS'\n        }, {\n          time: 27,\n          units: 'MCTCM'\n        }, {\n          time: 39,\n          units: 'MTO'\n        }\n      ]\n    };\n    return this.spawnLocations = {\n      'trial1': [\n        {\n          x: 120,\n          y: 19\n        }, {\n          x: 128,\n          y: 18\n        }, {\n          x: 124,\n          y: 23\n        }, {\n          x: 125,\n          y: 32\n        }, {\n          x: 128,\n          y: 27\n        }, {\n          x: 132,\n          y: 31\n        }, {\n          x: 134,\n          y: 16\n        }, {\n          x: 149,\n          y: 14\n        }, {\n          x: 143,\n          y: 36\n        }, {\n          x: 152,\n          y: 34\n        }, {\n          x: 155,\n          y: 30\n        }\n      ],\n      'trial2': [\n        {\n          x: 13,\n          y: 94\n        }, {\n          x: 14,\n          y: 100\n        }, {\n          x: 8,\n          y: 99\n        }, {\n          x: 12,\n          y: 107\n        }, {\n          x: 16,\n          y: 107\n        }, {\n          x: 7,\n          y: 111\n        }, {\n          x: 16,\n          y: 113\n        }, {\n          x: 21,\n          y: 116\n        }, {\n          x: 7,\n          y: 125\n        }, {\n          x: 11,\n          y: 124\n        }, {\n          x: 14,\n          y: 128\n        }, {\n          x: 30,\n          y: 130\n        }, {\n          x: 31,\n          y: 125\n        }, {\n          x: 25,\n          y: 129\n        }, {\n          x: 40,\n          y: 127\n        }, {\n          x: 42,\n          y: 131\n        }\n      ],\n      'trial3': [\n        {\n          x: 101,\n          y: 122\n        }, {\n          x: 107,\n          y: 121\n        }, {\n          x: 120,\n          y: 131\n        }, {\n          x: 128,\n          y: 129\n        }, {\n          x: 134,\n          y: 128\n        }, {\n          x: 133,\n          y: 124\n        }, {\n          x: 137,\n          y: 120\n        }, {\n          x: 133,\n          y: 114\n        }, {\n          x: 138,\n          y: 112\n        }, {\n          x: 130,\n          y: 108\n        }, {\n          x: 125,\n          y: 112\n        }\n      ]\n    };\n  };\n\n  TheTrialsReferee.prototype.heroHeal = function() {\n    this.hero.health = this.hero.maxHealth;\n    return this.hero.sayWithoutBlocking(\"Fungus, it does a body good!\");\n  };\n\n  TheTrialsReferee.prototype.eventActive = function(eventName) {\n    return this.events[eventName] && (this.world.age - this.events[eventName] <= this.eventDurations[\"default\"].time);\n  };\n\n  TheTrialsReferee.prototype.eventDelayPassed = function(eventName) {\n    return this.events[eventName] && (this.world.age - this.events[eventName] >= this.eventDurations[\"default\"].time);\n  };\n\n  TheTrialsReferee.prototype.eventConditions = function(eventName) {\n    switch (eventName) {\n      case \"greeting\":\n        return this.newGame && this.world.age <= this.eventDurations[\"default\"].time;\n      case \"trial1_intro1\":\n      case \"trial1_intro2\":\n        return this.newGame && (!this.events[eventName] || this.eventActive(eventName));\n      case \"trial1_prep\":\n        return this.newGame && this.world.getSystem(\"Inventory\").collectables < 1;\n      case \"trial1_started\":\n        return this.waves.trial1[0] && this.eventDelayPassed(eventName);\n      case \"trial1_complete\":\n        return this.events['trial1_started'] && !this.waves.trial1[0] && !this.completed['trial1'];\n      case \"trial2_prep\":\n        return !this.events['trial2_started'] && this.completed['trial1'] && this.world.getSystem(\"Inventory\").collectables < 1;\n      case \"trial2_started\":\n        return this.waves.trial2[0] && this.eventDelayPassed(eventName);\n      case \"trial2_complete\":\n        return this.events['trial2_started'] && !this.waves.trial2[0] && !this.completed['trial2'];\n      case \"trial3_prep\":\n        return !this.events['trial3_started'] && this.completed['trial2'] && this.world.getSystem(\"Inventory\").collectables < 1;\n      case \"trial3_started\":\n        return this.waves.trial3[0] && this.eventDelayPassed(eventName);\n      case \"trial3_complete\":\n        return this.events['trial3_started'] && !this.waves.trial3[0] && !this.completed['trial3'];\n      case \"bossSpawn\":\n        return this.completed['trial3'] && this.eventDelayPassed(eventName);\n    }\n  };\n\n  TheTrialsReferee.prototype.currentProgress = function() {\n    if (this.completed['trial1'] && this.completed['trial2'] && this.completed['trial3']) {\n      return 4;\n    } else if (this.completed['trial1'] && this.completed['trial2']) {\n      return 3;\n    } else if (this.completed['trial1']) {\n      return 2;\n    } else {\n      return 1;\n    }\n  };\n\n  TheTrialsReferee.prototype.trialLocations = function() {\n    switch (this.currentProgress()) {\n      case 1:\n        return this.spawnLocations.trial1;\n      case 2:\n        return this.spawnLocations.trial2;\n      case 3:\n        return this.spawnLocations.trial3;\n    }\n  };\n\n  TheTrialsReferee.prototype.allEnemiesCleared = function() {\n    var enemies, t;\n    enemies = (function() {\n      var _i, _len, _ref1, _results;\n      _ref1 = this.world.getSystem(\"Combat\").attackables;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        t = _ref1[_i];\n        if (t.isAttackable && t.team === \"ogres\" && !t.dead && t !== this.hero) {\n          _results.push(t);\n        }\n      }\n      return _results;\n    }).call(this);\n    return enemies.length < 1;\n  };\n\n  TheTrialsReferee.prototype.enemiesCleared = function() {\n    var loc, minibosses, t, trialLocations, unit, _i, _j, _len, _len1, _ref1;\n    trialLocations = this.trialLocations();\n    if (trialLocations) {\n      _ref1 = this.world.getSystem(\"Combat\").attackables;\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        unit = _ref1[_i];\n        if (!(unit.team === 'ogres')) {\n          continue;\n        }\n        for (_j = 0, _len1 = trialLocations.length; _j < _len1; _j++) {\n          loc = trialLocations[_j];\n          if (loc.x === unit.pos.x && loc.y === unit.pos.y) {\n            return false;\n          }\n        }\n        if (this.hero.distanceTo(unit) <= 40) {\n          return false;\n        }\n      }\n      minibosses = (function() {\n        var _k, _len2, _ref2, _results;\n        _ref2 = this.world.thangs;\n        _results = [];\n        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n          t = _ref2[_k];\n          if (t.type === 'oasis-guardian' && t.exists && t.health >= 0) {\n            _results.push(t);\n          }\n        }\n        return _results;\n      }).call(this);\n      return !minibosses.length > 0;\n    }\n  };\n\n  TheTrialsReferee.prototype.spawnMushrooms = function(locations) {\n    var mushroomPos, _i, _len, _results;\n    _results = [];\n    for (_i = 0, _len = locations.length; _i < _len; _i++) {\n      mushroomPos = locations[_i];\n      this.buildXY(\"mushroom\", mushroomPos.x, mushroomPos.y);\n      _results.push(this.performBuild());\n    }\n    return _results;\n  };\n\n  TheTrialsReferee.prototype.spawnWave = function(wave) {\n    var buildType, buildTypes, buildx, buildy, choices, key, newEnemy, rand, spawnPos, trialLocations, units, _i, _len, _results;\n    units = (function() {\n      var _i, _len, _ref1, _results;\n      _ref1 = wave.units;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        key = _ref1[_i];\n        _results.push(this.enemyUnits[key]);\n      }\n      return _results;\n    }).call(this);\n    buildTypes = (function() {\n      var _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = units.length; _i < _len; _i++) {\n        choices = units[_i];\n        _results.push(choices[this.world.rand.rand(choices.length)]);\n      }\n      return _results;\n    }).call(this);\n    trialLocations = this.trialLocations();\n    _results = [];\n    for (_i = 0, _len = buildTypes.length; _i < _len; _i++) {\n      buildType = buildTypes[_i];\n      rand = Math.floor(this.world.rand.randf2(0, trialLocations.length - 1));\n      spawnPos = trialLocations[rand];\n      buildx = spawnPos.x + 2 * (-0.5 + this.world.rand.randf());\n      buildy = spawnPos.y + 2 * (-0.5 + this.world.rand.randf());\n      newEnemy = this.instabuild(buildType, buildx, buildy);\n      if ((this.currentProgress() === 1 || this.currentProgress() === 2 || this.currentProgress() === 3) && buildType === \"oasis-guardian\") {\n        if (this.currentProgress() === 1) {\n          newEnemy.say(\"PUNY HUMAN... ME HUNGRY!\");\n        }\n        if (this.currentProgress() === 2) {\n          newEnemy.say(\"RAAAAAAWWWR!\");\n        }\n        if (this.currentProgress() === 3) {\n          _results.push(newEnemy.say(\"SMASH! SMASH!\"));\n        } else {\n          _results.push(void 0);\n        }\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  TheTrialsReferee.prototype.checkVictory = function() {\n    var _ref1;\n    if (this.events['bossEngaged'] && this.allEnemiesCleared()) {\n      this.setGoalState('oracle-die', 'success');\n    }\n    if (((_ref1 = this.hero) != null ? _ref1.erroredOut : void 0) && !this.givenUpOnHero) {\n      this.givenUpOnHero = true;\n      return this.world.endWorld(false, 6, true);\n    }\n  };\n\n  return TheTrialsReferee;\n\n})(Component);\n",
	"system": "misc",
	"creator": "512ef4805a67a8c507000001",
	"original": "54a9b9b3b44a31feb230e913",
	"watchers": [
		"512ef4805a67a8c507000001",
		"5162fab9c92b4c751e000274"
	],
	"__v": 0,
	"description": "This Component makes the Thang o'ermaster The Trials.",
	"dependencies": [
		{
			"original": "54977ce657e90bd1903dea72",
			"majorVersion": 0
		}
	],
	"commitMessage": "Moved a mushroom out of the corner so it doesn't lure heroes to getting stuck not seeing any other mushrooms.",
	"parent": "573f9f083e910f115e5e4634",
	"patches": [],
	"index": true,
	"created": "2016-05-23T15:08:09.506Z",
	"version": {
		"isLatestMinor": true,
		"isLatestMajor": true,
		"minor": 28,
		"major": 0
	},
	"permissions": [
		{
			"access": "owner",
			"target": "512ef4805a67a8c507000001"
		},
		{
			"access": "read",
			"target": "public"
		}
	]
}