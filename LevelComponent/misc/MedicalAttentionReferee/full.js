{
	"_id": "5669fdebb7466927006ef4ee",
	"searchStrings": "medical attention referee m me med medi medic medica medical medicala medicalat medicalatt medicalatte medicalatten medicalattent medicalattenti medicalattentio medicalattention medicalattentionr medicalattentionre medicalattentionref medicalattentionrefe medicalattentionrefer",
	"index": true,
	"slug": "medicalattentionreferee",
	"name": "MedicalAttentionReferee",
	"js": "var MedicalAttentionReferee, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nMedicalAttentionReferee = (function(_super) {\n  __extends(MedicalAttentionReferee, _super);\n\n  function MedicalAttentionReferee() {\n    _ref = MedicalAttentionReferee.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  MedicalAttentionReferee.className = 'MedicalAttentionReferee';\n\n  MedicalAttentionReferee.prototype.chooseAction = function() {\n    var id, m, wave, _i, _j, _len, _len1, _ref1, _ref2;\n    if (!this.didSetUp) {\n      this.setUp();\n    }\n    wave = this.waves[0];\n    if (wave && this.world.age >= wave.time) {\n      this.spawnWave(wave);\n      this.waves.shift();\n    }\n    _ref1 = this.built;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      m = _ref1[_i];\n      if (m.health > 0) {\n        this.controlMinion(m);\n      }\n    }\n    _ref2 = this.soldierIDs;\n    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n      id = _ref2[_j];\n      this.controlSoldier(this.world.getThangByID(id));\n    }\n    this.controlHealer();\n    return this.checkVictory();\n  };\n\n  MedicalAttentionReferee.prototype.setUp = function() {\n    var healer, hero, paths, soldier, soldierID, _i, _len, _ref1;\n    hero = this.world.getThangByID(\"Hero Placeholder\");\n    this.hero = hero;\n    hero.seesThroughWalls = true;\n    this.didSetUp = true;\n    this.soldierIDs = ['Joan', 'Augustus', 'Nikita'];\n    this.healRequests = ['Heal me!', 'Heal, please!', 'I need healing!'];\n    this.healMark = {\n      x: 65,\n      y: 46\n    };\n    _ref1 = this.soldierIDs;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      soldierID = _ref1[_i];\n      soldier = this.world.getThangByID(soldierID);\n      soldier.atHealMark = false;\n      soldier.requestedHeal = false;\n    }\n    this.buildTypeNames = {\n      M: ['ogre-munchkin-f', 'ogre-munchkin-m'],\n      C: ['ogre-scout-f', 'ogre-scout-m'],\n      T: ['ogre-thrower'],\n      O: ['ogre-m'],\n      S: ['ogre-shaman'],\n      F: ['ogre-f']\n    };\n    this.positions = {\n      n: {\n        x: 41,\n        y: 68\n      },\n      n1: {\n        x: 49,\n        y: 55\n      },\n      e: {\n        x: 80,\n        y: 33\n      },\n      e1: {\n        x: 65,\n        y: 34\n      },\n      sw: {\n        x: 4,\n        y: -4\n      },\n      sw1: {\n        x: 30,\n        y: 24\n      },\n      c: {\n        x: 51,\n        y: 41\n      }\n    };\n    paths = {\n      N: [this.positions.n, this.positions.n1],\n      E: [this.positions.e, this.positions.e1],\n      SW: [this.positions.sw, this.positions.sw1]\n    };\n    this.waves = [\n      {\n        time: 1,\n        path: paths.SW,\n        ogres: 'C'\n      }, {\n        time: 12,\n        path: paths.E,\n        ogres: 'CC'\n      }, {\n        time: 17,\n        path: paths.N,\n        ogres: 'CCC'\n      }, {\n        time: 22,\n        path: paths.SW,\n        ogres: 'OO'\n      }, {\n        time: 34,\n        path: paths.E,\n        ogres: 'O'\n      }, {\n        time: 44,\n        path: paths.N,\n        ogres: 'CCC'\n      }, {\n        time: 54,\n        path: paths.SW,\n        ogres: 'OO'\n      }\n    ];\n    healer = this.world.getThangByID('Doctor Beak');\n    this.healer = healer;\n    return healer.healQueue = [];\n  };\n\n  MedicalAttentionReferee.prototype.spawnWave = function(wave) {\n    var buildType, buildTypeChoices, buildTypes, buildx, buildy, choices, key, minion, spawnPos, _i, _len, _results;\n    buildTypeChoices = (function() {\n      var _i, _len, _ref1, _results;\n      _ref1 = wave.ogres;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        key = _ref1[_i];\n        _results.push(this.buildTypeNames[key]);\n      }\n      return _results;\n    }).call(this);\n    buildTypes = (function() {\n      var _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = buildTypeChoices.length; _i < _len; _i++) {\n        choices = buildTypeChoices[_i];\n        _results.push(choices[this.world.rand.rand(choices.length)]);\n      }\n      return _results;\n    }).call(this);\n    _results = [];\n    for (_i = 0, _len = buildTypes.length; _i < _len; _i++) {\n      buildType = buildTypes[_i];\n      spawnPos = wave.path[0];\n      buildx = spawnPos.x + 2 * (-0.5 + this.world.rand.randf());\n      buildy = spawnPos.y + 2 * (-0.5 + this.world.rand.randf());\n      this.buildXY(buildType, buildx, buildy);\n      minion = this.performBuild();\n      minion.origSpeed = minion.maxSpeed;\n      minion.wave = wave;\n      _results.push(minion.path = wave.path.slice());\n    }\n    return _results;\n  };\n\n  MedicalAttentionReferee.prototype.controlMinion = function(minion) {\n    var enemy, hero, path, waypoint;\n    hero = this.world.getThangByID('Hero Placeholder');\n    path = minion.path;\n    if (path.length > 0) {\n      waypoint = path[0];\n      if (waypoint) {\n        minion.move(waypoint);\n        if (minion.distance(waypoint) < 4) {\n          return path.shift();\n        }\n      }\n    } else {\n      if (minion.distanceTo(hero) <= minion.attackRange) {\n        enemy = hero;\n      } else {\n        enemy = minion.getNearestEnemy();\n      }\n      if (enemy) {\n        minion.attack(enemy);\n        if (enemy.target === minion) {\n          return minion.maxSpeed = minion.origSpeed * 0.95;\n        } else {\n          return minion.maxSpeed = minion.origSpeed;\n        }\n      } else {\n        return minion.move(this.positions.c);\n      }\n    }\n  };\n\n  MedicalAttentionReferee.prototype.controlSoldier = function(soldier) {\n    var enemy;\n    if (soldier.health <= 0) {\n      return;\n    }\n    if (soldier.health < (soldier.maxHealth * 0.6)) {\n      if (soldier.distanceTo(this.healMark) < 3) {\n        if (!soldier.requestedHeal || soldier.requestedHeal < this.world.age - 1.5) {\n          soldier.requestedHeal = this.world.age;\n          return soldier.say(this.healRequests[this.world.rand.rand(this.healRequests.length)]);\n        }\n      } else {\n        if (!soldier.atHealMark) {\n          if (soldier.distanceTo(this.healMark) < 3) {\n            return soldier.atHealMark = true;\n          } else {\n            return soldier.move(this.healMark);\n          }\n        }\n      }\n    } else {\n      if (soldier.requestedHeal) {\n        soldier.requestedHeal = false;\n        if (soldier.distanceTo(this.healMark) > 3) {\n          soldier.atHealMark = false;\n        }\n      }\n      enemy = soldier.findNearestEnemy();\n      return soldier.attack(enemy);\n    }\n  };\n\n  MedicalAttentionReferee.prototype.controlHealer = function() {\n    var healer, target;\n    healer = this.world.getThangByID('Doctor Beak');\n    if (healer.canCast('heal') && healer.healQueue.length > 0) {\n      target = healer.healQueue[0];\n      if (target) {\n        if (target.health < target.maxHealth) {\n          healer.cast('heal', target);\n          healer.say('Healed!');\n        }\n        return healer.healQueue.shift();\n      }\n    } else if (healer.healQueue.length === 0) {\n      return healer.setAction('idle');\n    }\n  };\n\n  MedicalAttentionReferee.prototype.checkVictory = function() {\n    var t;\n    if (this.victoryChecked) {\n      return;\n    }\n    if (!this.waves.length && !((function() {\n      var _i, _len, _ref1, _results;\n      _ref1 = this.built;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        t = _ref1[_i];\n        if (t.health > 0) {\n          _results.push(t);\n        }\n      }\n      return _results;\n    }).call(this)).length) {\n      this.world.setGoalState('ogres-die', 'success');\n      return this.victoryChecked = true;\n    }\n  };\n\n  return MedicalAttentionReferee;\n\n})(Component);\n",
	"system": "misc",
	"creator": "537d01f484c54c6e05c05989",
	"original": "548ceb3d0ffdc235e80ef0bc",
	"watchers": [
		"512ef4805a67a8c507000001",
		"5162fab9c92b4c751e000274"
	],
	"__v": 0,
	"description": "This Component makes the Thang o'ermaster the Medical Attention level.",
	"codeLanguage": "coffeescript",
	"dependencies": [
		{
			"original": "52d9a6773cf02dcf26000dc4",
			"majorVersion": 0
		}
	],
	"commitMessage": "Further improvements to logic. Ogres slow down when chasing an enemy that isn't targeting them, soldiers are smarter about where they are when getting healed, changed the ogres spawned in the final waves.",
	"parent": "5669c438f252e324003dd4ae",
	"created": "2015-12-10T22:34:19.568Z",
	"version": {
		"isLatestMinor": true,
		"isLatestMajor": true,
		"minor": 15,
		"major": 0
	},
	"permissions": [
		{
			"access": "owner",
			"target": "512ef4805a67a8c507000001"
		},
		{
			"access": "read",
			"target": "public"
		}
	]
}