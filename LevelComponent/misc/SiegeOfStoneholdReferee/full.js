{
	"_id": "5644f6be142a5a880590d713",
	"searchStrings": "siege of stonehold referee s si sie sieg siege siegeo siegeof siegeofs siegeofst siegeofsto siegeofston siegeofstone siegeofstoneh siegeofstoneho siegeofstonehol siegeofstonehold siegeofstoneholdr siegeofstoneholdre siegeofstoneholdref siegeofstoneholdrefe siegeofstoneholdrefer",
	"index": true,
	"slug": "siegeofstoneholdreferee",
	"name": "SiegeOfStoneholdReferee",
	"js": "var SiegeOfStoneholdReferee, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\nSiegeOfStoneholdReferee = (function(_super) {\n  __extends(SiegeOfStoneholdReferee, _super);\n\n  function SiegeOfStoneholdReferee() {\n    _ref = SiegeOfStoneholdReferee.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  SiegeOfStoneholdReferee.className = 'SiegeOfStoneholdReferee';\n\n  SiegeOfStoneholdReferee.prototype.chooseAction = function() {\n    var minion, t, wave, _i, _len, _ref1;\n    if (!this.stoneholdSetUp) {\n      this.setUpStonehold();\n    }\n    t = this.world.age;\n    wave = this.waves[0];\n    if (wave && t >= wave.time) {\n      this.spawnWave(wave);\n      this.waves.shift();\n    }\n    _ref1 = this.built;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      minion = _ref1[_i];\n      if (minion.health > 0) {\n        this.controlMinion(minion);\n      }\n    }\n    this.controlHealer();\n    return this.checkStoneholdVictory();\n  };\n\n  SiegeOfStoneholdReferee.prototype.setUpStonehold = function() {\n    var P, p;\n    this.stoneholdSetUp = true;\n    this.positions = {\n      center: {\n        x: 66,\n        y: 70\n      },\n      ne: {\n        x: 156,\n        y: 84\n      },\n      ne1: {\n        x: 146,\n        y: 120\n      },\n      ne2: {\n        x: 124,\n        y: 118\n      },\n      se: {\n        x: 156,\n        y: 53\n      },\n      se1: {\n        x: 142,\n        y: 33\n      },\n      se2: {\n        x: 112,\n        y: 33\n      },\n      n: {\n        x: 75,\n        y: 125\n      },\n      n1: {\n        x: 75,\n        y: 115\n      },\n      s: {\n        x: 58,\n        y: 6\n      },\n      s1: {\n        x: 58,\n        y: 18\n      },\n      s2: {\n        x: 65,\n        y: 22\n      },\n      nw: {\n        x: 9,\n        y: 129\n      },\n      nw1: {\n        x: 30,\n        y: 114\n      },\n      sw: {\n        x: 9,\n        y: 6\n      },\n      sw1: {\n        x: 30,\n        y: 28\n      }\n    };\n    p = this.positions;\n    this.paths = {\n      NE_C: [p.ne, p.ne1, p.ne2],\n      SE_C: [p.se, p.se1, p.se2],\n      NW_C: [p.nw, p.nw1, p.n1],\n      SW_C: [p.sw, p.sw1, p.s1],\n      N_C: [p.n, p.n1],\n      S_C: [p.s, p.s1, p.s2]\n    };\n    P = this.paths;\n    this.waves = [\n      {\n        time: 1,\n        paths: [P.NE_C],\n        ogres: ['MMMMMMMMMMT']\n      }, {\n        time: 3,\n        paths: [P.SW_C],\n        ogres: ['MMMMMM']\n      }, {\n        time: 12,\n        paths: [P.SE_C],\n        ogres: ['MMMMMMM']\n      }, {\n        time: 15,\n        paths: [P.NW_C],\n        ogres: ['MMMMMMMTT']\n      }, {\n        time: 24,\n        paths: [P.S_C],\n        ogres: ['MMMMOO']\n      }, {\n        time: 27,\n        paths: [P.NE_C],\n        ogres: ['MMMMMMMTT']\n      }, {\n        time: 36,\n        paths: [P.S_C],\n        ogres: ['MMMMMMTT']\n      }, {\n        time: 42,\n        paths: [P.N_C],\n        ogres: ['OOTT']\n      }, {\n        time: 48,\n        paths: [P.SE_C],\n        ogres: ['MMMMMMMTT']\n      }, {\n        time: 51,\n        paths: [P.N_C],\n        ogres: ['MMMMMMMOOTT']\n      }, {\n        time: 62,\n        paths: [P.S_C],\n        ogres: ['MMMMMTT']\n      }, {\n        time: 65,\n        paths: [P.N_C],\n        ogres: ['MMMMMOOTT']\n      }, {\n        time: 74,\n        paths: [P.S_C],\n        ogres: ['MMMMMMTS']\n      }, {\n        time: 77,\n        paths: [P.NE_C],\n        ogres: ['MMMMMOS']\n      }\n    ];\n    this.thoktar = this.world.getThangByID('Thoktar');\n    return this.healMark = this.world.getThangByID('Heal Mark');\n  };\n\n  SiegeOfStoneholdReferee.prototype.spawnWave = function(wave) {\n    var buildType, buildTypeChoices, buildTypes, buildx, buildy, choices, insults, key, ogreKeys, path, spawnPos, thang, _i, _len, _results;\n    ogreKeys = wave.ogres[this.world.rand.rand(wave.ogres.length)];\n    buildTypeChoices = (function() {\n      var _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = ogreKeys.length; _i < _len; _i++) {\n        key = ogreKeys[_i];\n        _results.push({\n          M: ['ogre-munchkin-f', 'ogre-munchkin-m'],\n          T: ['ogre-thrower'],\n          O: ['ogre-m'],\n          S: ['ogre-shaman'],\n          F: ['ogre-f']\n        }[key]);\n      }\n      return _results;\n    })();\n    buildTypes = (function() {\n      var _i, _len, _results;\n      _results = [];\n      for (_i = 0, _len = buildTypeChoices.length; _i < _len; _i++) {\n        choices = buildTypeChoices[_i];\n        _results.push(choices[this.world.rand.rand(choices.length)]);\n      }\n      return _results;\n    }).call(this);\n    path = wave.path = wave.paths[this.world.rand.rand(wave.paths.length)];\n    _results = [];\n    for (_i = 0, _len = buildTypes.length; _i < _len; _i++) {\n      buildType = buildTypes[_i];\n      spawnPos = path[0];\n      buildx = spawnPos.x + 1.5 * (-0.5 + this.world.rand.randf());\n      buildy = spawnPos.y + 3 * (-0.5 + this.world.rand.randf());\n      this.buildXY(buildType, buildx, buildy);\n      thang = this.performBuild();\n      thang.wave = wave;\n      thang.path = path.slice();\n      insults = ['Die, humans!', 'Take that!', 'Destroy them!', 'Go, minions!', 'Get their bones!', \"Don't live!\"];\n      _results.push(this.thoktar.say(insults[Math.floor(this.world.rand.randf() * insults.length)]));\n    }\n    return _results;\n  };\n\n  SiegeOfStoneholdReferee.prototype.controlMinion = function(minion) {\n    var enemy, path, waypoint;\n    path = minion.path;\n    if (path.length > 0) {\n      waypoint = path[0];\n      if (waypoint) {\n        minion.move(waypoint);\n        if (minion.distance(waypoint) < 4) {\n          return path.shift();\n        }\n      }\n    } else {\n      enemy = minion.getNearestEnemy();\n      if (enemy) {\n        return minion.attack(enemy);\n      } else {\n        return minion.moveXY(66, 70);\n      }\n    }\n  };\n\n  SiegeOfStoneholdReferee.prototype.checkStoneholdVictory = function() {\n    var ogresSurviving, t;\n    if (!(this.world.age > 80)) {\n      return;\n    }\n    if (this.checkedVictoryAt) {\n      if (this.world.age > this.checkedVictoryAt + 2.5) {\n        this.thoktar.move({\n          x: this.thoktar.pos.x + 50,\n          y: this.thoktar.pos.y\n        });\n      }\n      return;\n    }\n    if (this.checkedVictory) {\n      return;\n    }\n    ogresSurviving = ((function() {\n      var _i, _len, _ref1, _results;\n      _ref1 = this.world.thangs;\n      _results = [];\n      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n        t = _ref1[_i];\n        if (t.team === 'ogres' && t.id !== 'Thoktar' && t.health > 0) {\n          _results.push(t);\n        }\n      }\n      return _results;\n    }).call(this)).length;\n    if (!ogresSurviving) {\n      this.setGoalState('ogres-die', 'success');\n      this.world.endWorld(true, 4);\n      this.checkedVictoryAt = this.world.age;\n      return this.thoktar.say(\"This isn't over!\");\n    }\n  };\n\n  SiegeOfStoneholdReferee.prototype.controlHealer = function() {\n    var healer, hero;\n    healer = this.world.getThangByID('Doctor');\n    hero = this.world.getThangByID('Hero Placeholder');\n    if (hero.health < hero.maxHealth && hero.distanceTo(this.healMark) < 3 && healer.canCast('heal')) {\n      healer.cast('heal', hero);\n      healer.say('Healed!');\n      if (healer.canCast(\"haste\", hero)) {\n        healer.cast(\"haste\", hero);\n      }\n      return hero.wasHealed = true;\n    } else {\n      healer.setAction('idle');\n      if (hero.health < (hero.maxHealth / 2)) {\n        return healer.say(hero.spriteName + '! I can heal you!');\n      }\n    }\n  };\n\n  return SiegeOfStoneholdReferee;\n\n})(Component);\n",
	"system": "misc",
	"creator": "54b1773a75e3055205e5a449",
	"original": "547135a3eb739dbc9d24036b",
	"watchers": [
		"512ef4805a67a8c507000001",
		"5162fab9c92b4c751e000274"
	],
	"__v": 0,
	"description": "This Component makes Thoktar o'ermaster his forces on Siege of Stonehold.",
	"codeLanguage": "coffeescript",
	"dependencies": [
		{
			"original": "52d9a6773cf02dcf26000dc4",
			"majorVersion": 0
		}
	],
	"commitMessage": "doctor casts haste",
	"parent": "55c3454a633ee6021f0cc263",
	"created": "2015-11-12T20:29:50.864Z",
	"version": {
		"isLatestMinor": true,
		"isLatestMajor": true,
		"minor": 14,
		"major": 0
	},
	"permissions": [
		{
			"access": "owner",
			"target": "512ef4805a67a8c507000001"
		},
		{
			"access": "read",
			"target": "public"
		}
	]
}