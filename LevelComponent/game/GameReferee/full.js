{
	"_id": "57bb1d4fb11ac32400134763",
	"searchStrings": "game referee g ga gam game gamer gamere gameref gamerefe gamerefer",
	"index": true,
	"slug": "gamereferee",
	"name": "GameReferee",
	"js": "var ArgumentError, GameReferee, _ref,\n  __hasProp = {}.hasOwnProperty,\n  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };\n\nArgumentError = require('lib/world/errors').ArgumentError;\n\nGameReferee = (function(_super) {\n  __extends(GameReferee, _super);\n\n  function GameReferee() {\n    _ref = GameReferee.__super__.constructor.apply(this, arguments);\n    return _ref;\n  }\n\n  GameReferee.className = 'GameReferee';\n\n  GameReferee.prototype.isGameReferee = true;\n\n  GameReferee.prototype.initialize = function() {\n    var propertyToIgnore, _i, _len, _ref1;\n    _ref1 = ['pos', 'rotation', 'width', 'height', 'shape', 'depth', 'volume', 'dragArea', 'hasRotated', 'rectangle', 'ellipse', 'getShape', 'isGrounded', 'isAirborne', 'contains', 'distance', 'distanceSquared', 'distanceTo', 'distanceToValidateReturn', 'getNearest', 'findNearest', 'intersects', 'team', 'superteam', 'significantProperty', 'getFriends', 'findFriends', 'hasFriends', 'getCombatants', 'findCombatants', 'findCorpses', 'getEnemies', 'findEnemies', 'hasEnemies', 'getEnemyMissiles', 'findEnemyMissiles', 'getFriendlyMissiles', 'findFriendlyMissiles', 'getNearestFriend', 'findNearestFriend', 'getNearestEnemy', 'findNearestEnemy', 'getNearestEnemyValidateReturn', 'getNearestCombatant', 'findNearestCombatant', 'allianceSystem', 'allies', 'allAllies'];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      propertyToIgnore = _ref1[_i];\n      delete this[propertyToIgnore];\n    }\n    this.spawnAliases = {\n      \"munchkin\": [\"munchkin-m\", \"munchkin-f\"],\n      \"soldier\": [\"soldier-m\", \"soldier-f\"],\n      \"archer\": [\"archer-f\", \"archer-m\"],\n      \"forest\": [\"tree-stand-1\", \"tree-stand-2\", \"tree-stand-3\", \"tree-stand-4\", \"tree-stand-5\", \"tree-stand-6\"]\n    };\n    this.validSpawnTypes = _.union(this.buildTypes, _.keys(this.spawnAliases));\n    this.actionHelpers = {};\n    this.goals = [];\n    this.goalsCompleted = 0;\n    return this.numSpawns = 0;\n  };\n\n  GameReferee.prototype.reverseAlias = function(str) {\n    var key;\n    if (this.spawnAliases[str]) {\n      return str;\n    }\n    for (key in this.spawnAliases) {\n      if (this.spawnAliases[key].indexOf(str) > -1) {\n        return key;\n      }\n    }\n    return str;\n  };\n\n  GameReferee.prototype.gameBuild = function(toBuild, x, y) {\n    toBuild = this.buildables[toBuild];\n    this.toBuild = toBuild;\n    this.targetPos = null;\n    this.setTargetPos(new Vector(x, y));\n    return this.toBuild;\n  };\n\n  GameReferee.prototype.spawnXY = function(type, x, y) {\n    var aliases, thang;\n    if (this.numSpawns > this.maxSpawnables) {\n      throw new Error(\"Maximum spawns (\" + this.maxSpawnables + \") exceeded.\");\n    }\n    if (typeof type === 'undefined') {\n      throw new ArgumentError(\"You need something to spawn.\", \"spawnXY\", \"type\", \"string\", type);\n    }\n    if (!(type && __indexOf.call(this.validSpawnTypes, type) >= 0)) {\n      throw new ArgumentError(\"You need a string to spawn; one of [\\\"\" + (this.validSpawnTypes.join('\\\", \\\"')) + \"\\\"]\", \"spawnXY\", \"type\", \"string\", type);\n    }\n    if (!_.isNumber(x)) {\n      throw new ArgumentError(\"Spawn the \" + type + \" at an (x, y) coordinate.\", \"spawnXY\", \"x\", \"number\", x);\n    }\n    if (!_.isNumber(y)) {\n      throw new ArgumentError(\"Spawn the \" + type + \" at an (x, y) coordinate.\", \"spawnXY\", \"y\", \"number\", y);\n    }\n    if (aliases = this.spawnAliases[type]) {\n      type = aliases[this.world.rand.rand(aliases.length)];\n    }\n    this.gameBuild(type, x, y);\n    thang = this.performBuild();\n    if (!thang) {\n      return;\n    }\n    this.numSpawns += 1;\n    if (type !== \"player\") {\n      thang.gameEntity = true;\n      thang.commander = this;\n      this.attachActionHelpers([thang]);\n      if (typeof thang.trigger === \"function\") {\n        thang.trigger(\"spawn\");\n      }\n    }\n    return thang;\n  };\n\n  GameReferee.prototype.spawnHeroXY = function(x, y) {\n    var player;\n    if (this.world.player) {\n      throw new Error(\"You can only spawn one hero\");\n    }\n    player = this.spawnXY(\"player\", x, y);\n    player.isPlayer = true;\n    this.world.player = player;\n    player.on(\"click\", this.defaultPlayerClickHandler);\n    return player;\n  };\n\n  GameReferee.prototype.setActionFor = function(thangOrType, event, fn) {\n    var u, units, _base, _base1;\n    if (typeof thangOrType === \"string\") {\n      if ((_base = this.actionHelpers)[thangOrType] == null) {\n        _base[thangOrType] = {};\n      }\n      if ((_base1 = this.actionHelpers[thangOrType])[event] == null) {\n        _base1[event] = [];\n      }\n      if (!(this.actionHelpers[thangOrType][event].indexOf(fn) > -1)) {\n        this.actionHelpers[thangOrType][event].push(fn);\n      }\n      units = (function() {\n        var _i, _len, _ref1, _results;\n        _ref1 = this.world.thangs;\n        _results = [];\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          u = _ref1[_i];\n          if (u.type === thangOrType) {\n            _results.push(u);\n          }\n        }\n        return _results;\n      }).call(this);\n      return this.attachActionHelpers(units);\n    } else if (typeof thangOrType === 'object') {\n      return typeof thangOrType.on === \"function\" ? thangOrType.on(event, fn) : void 0;\n    }\n  };\n\n  GameReferee.prototype.attachActionHelpers = function(units) {\n    var event, events, fn, t, unit, _i, _len, _ref1, _results;\n    if (!(units != null ? units.length : void 0)) {\n      return;\n    }\n    _results = [];\n    for (_i = 0, _len = units.length; _i < _len; _i++) {\n      unit = units[_i];\n      t = this.reverseAlias(unit.type);\n      if (events = (_ref1 = this.actionHelpers) != null ? _ref1[t] : void 0) {\n        _results.push((function() {\n          var _j, _len1, _ref2, _results1;\n          _ref2 = _.keys(events);\n          _results1 = [];\n          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {\n            event = _ref2[_j];\n            _results1.push((function() {\n              var _k, _len2, _ref3, _results2;\n              _ref3 = events[event];\n              _results2 = [];\n              for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {\n                fn = _ref3[_k];\n                _results2.push(unit.on(event, fn));\n              }\n              return _results2;\n            })());\n          }\n          return _results1;\n        })());\n      } else {\n        _results.push(void 0);\n      }\n    }\n    return _results;\n  };\n\n  GameReferee.prototype.addMoveGoalXY = function(x, y) {\n    var mark;\n    if (!_.isNumber(x)) {\n      throw new ArgumentError(\"Set the goal at an (x, y) coordinate.\", \"addMoveGoalXY\", \"x\", \"number\", x);\n    }\n    if (!_.isNumber(y)) {\n      throw new ArgumentError(\"Set the goal at an (x, y) coordinate.\", \"addMoveGoalXY\", \"y\", \"number\", y);\n    }\n    mark = this.spawnXY('x-mark-red', x, y);\n    return this.setGoal(\"move\", {\n      pos: Vector(x, y),\n      mark: mark\n    });\n  };\n\n  GameReferee.prototype.addDefeatGoal = function() {\n    return this.addGoal(\"defeat\", {\n      team: \"ogres\"\n    });\n  };\n\n  GameReferee.prototype.addSurviveGoal = function() {\n    return this.addGoal(\"survive\");\n  };\n\n  GameReferee.prototype.addCollectGoal = function() {\n    return this.addGoal(\"collect\", {\n      types: ['Gem', 'Chest of Gems']\n    });\n  };\n\n  GameReferee.prototype.setBehavior = function(target, behaviorString) {\n    var _ref1;\n    if ((_ref1 = target.type) !== \"munchkin\" && _ref1 !== \"soldier\") {\n      throw new Error(\"Only units can have behaviors. Did you mean to use any of : \" + [\"munchkin\", \"soldier\"]);\n    }\n    if (behaviorString !== \"attackNearest\") {\n      throw new Error(\"Unknown behavior string: \" + behaviorString + \". Did you mean to use any of: \" + [\"attackNearest\"]);\n    }\n    switch (behaviorString) {\n      case \"attackNearest\":\n        return target.commander = null;\n    }\n  };\n\n  GameReferee.prototype.setGoal = function(goalType, config) {\n    if (config == null) {\n      config = {};\n    }\n    return this.addGoal(goalType, config);\n  };\n\n  GameReferee.prototype.addGoal = function(goalType, config) {\n    var goal;\n    if (config == null) {\n      config = {};\n    }\n    goal = {\n      type: goalType,\n      success: false,\n      config: config\n    };\n    return this.goals.push(goal);\n  };\n\n  GameReferee.prototype.defaultPlayerClickHandler = function(event) {\n    var nearby, player, target, u, world;\n    player = event.target;\n    if (event.type === 'click') {\n      target = event.target.world.getThangByID(event.thangID);\n      if (target && target.team !== player.team && target.health > 0) {\n        return typeof player.attack === \"function\" ? player.attack(target) : void 0;\n      } else {\n        world = event.target.world;\n        nearby = (function() {\n          var _i, _len, _ref1, _results;\n          _ref1 = world.thangs;\n          _results = [];\n          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n            u = _ref1[_i];\n            if (!u.isPlayer && u.team !== world.player.team && u.isAttackable && u.health > 0 && u.pos.distanceSquared(event.pos) <= 2.25) {\n              _results.push(u);\n            }\n          }\n          return _results;\n        })();\n        if (nearby.length > 0) {\n          console.log(\"NEAR CLICK ATTACK!!\");\n          return typeof player.attack === \"function\" ? player.attack(nearby[0]) : void 0;\n        } else {\n          return player.move(event.pos);\n        }\n      }\n    }\n  };\n\n  GameReferee.prototype.update = function() {\n    var thang, _i, _len, _ref1;\n    _ref1 = this.world.thangs;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      thang = _ref1[_i];\n      if (thang.trigger != null) {\n        thang.trigger(\"update\");\n      }\n    }\n    if (this.goals.length) {\n      return this.checkGoals();\n    }\n  };\n\n  GameReferee.prototype.checkGoals = function() {\n    var goal, _i, _len, _ref1;\n    if (this.goals.length === 0) {\n      return;\n    }\n    _ref1 = this.goals;\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      goal = _ref1[_i];\n      if (goal.success) {\n        continue;\n      }\n      this.goalHandler(goal);\n    }\n    if (this.goalsCompleted === this.goals.length) {\n      return this.setGoalState('win-game', 'success');\n    }\n  };\n\n  GameReferee.prototype.goalHandler = function(goal) {\n    var defeatables, team, thang, undefeated, _ref1, _ref2, _ref3, _ref4;\n    switch (goal.type) {\n      case 'move':\n        if (((_ref1 = this.world.player) != null ? _ref1.distanceSquared(goal.config.pos) : void 0) < 1) {\n          if (goal.config.mark) {\n            if ((_ref2 = goal.config.mark) != null) {\n              _ref2.setExists(false);\n            }\n          }\n          goal.success = true;\n          return this.goalsCompleted++;\n        }\n        break;\n      case 'time':\n        if (this.world.age >= goal.config) {\n          goal.success = true;\n          return this.goalsCompleted++;\n        }\n        break;\n      case 'survive':\n      case 'live':\n        if (((_ref3 = this.world.player) != null ? _ref3.health : void 0) <= 0) {\n          this.setGoalState('win-game', 'failure');\n        }\n        if (this.goalsCompleted === (this.goals.length - 1)) {\n          goal.success = true;\n          return this.goalsCompleted++;\n        }\n        break;\n      case 'defeat':\n        team = ((_ref4 = goal.config) != null ? _ref4.team : void 0) ? goal.config.team : \"ogres\";\n        defeatables = ((function() {\n          var _i, _len, _ref5, _results;\n          _ref5 = this.world.thangs;\n          _results = [];\n          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {\n            thang = _ref5[_i];\n            if (thang.team === team && thang.exists) {\n              _results.push(thang);\n            }\n          }\n          return _results;\n        }).call(this)).length;\n        undefeated = ((function() {\n          var _i, _len, _ref5, _results;\n          _ref5 = this.world.thangs;\n          _results = [];\n          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {\n            thang = _ref5[_i];\n            if (thang.team === team && thang.health > 0 && thang.exists && thang.isAttackable) {\n              _results.push(thang);\n            }\n          }\n          return _results;\n        }).call(this)).length;\n        if (defeatables > 0 && undefeated === 0) {\n          goal.success = true;\n          return this.goalsCompleted += 1;\n        }\n        break;\n      case 'collect':\n      case 'collect-gems':\n        if (((function() {\n          var _i, _len, _ref5, _ref6, _results;\n          _ref5 = this.world.thangs;\n          _results = [];\n          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {\n            thang = _ref5[_i];\n            if ((_ref6 = thang.spriteName) === 'Gem' || _ref6 === 'Chest of Gems') {\n              _results.push(thang);\n            }\n          }\n          return _results;\n        }).call(this)).length > 0 && ((function() {\n          var _i, _len, _ref5, _ref6, _results;\n          _ref5 = this.world.thangs;\n          _results = [];\n          for (_i = 0, _len = _ref5.length; _i < _len; _i++) {\n            thang = _ref5[_i];\n            if (((_ref6 = thang.spriteName) === 'Gem' || _ref6 === 'Chest of Gems') && thang.exists) {\n              _results.push(thang);\n            }\n          }\n          return _results;\n        }).call(this)).length === 0) {\n          goal.success = true;\n          return this.goalsCompleted += 1;\n        }\n    }\n  };\n\n  return GameReferee;\n\n})(Component);\n",
	"system": "game",
	"creator": "54b1773a75e3055205e5a449",
	"original": "574874761f48e4a350ee06dc",
	"watchers": [
		"512ef4805a67a8c507000001"
	],
	"__v": 0,
	"commitMessage": "Remove instabuild and extra hero buildable code.",
	"parent": "57b750547a14ff35003b5c22",
	"description": "This Component the Thang o'ermaster a game-dev level, writing code not for the hero but to control the game they are making.",
	"dependencies": [
		{
			"original": "524cbdc03ea855e0ab0000bb",
			"majorVersion": 0
		},
		{
			"original": "52d9a6773cf02dcf26000dc4",
			"majorVersion": 0
		}
	],
	"configSchema": {
		"properties": {
			"maxSpawnables": {
				"type": "number",
				"minimum": 0,
				"exclusiveMinimum": true,
				"description": "The maximum number of thangs the game is allowed to spawn."
			}
		},
		"default": {
			"maxSpawnables": 1000
		}
	},
	"created": "2016-08-22T15:42:07.435Z",
	"version": {
		"isLatestMinor": true,
		"isLatestMajor": true,
		"minor": 46,
		"major": 0
	},
	"permissions": [
		{
			"access": "owner",
			"target": "512ef4805a67a8c507000001"
		},
		{
			"access": "read",
			"target": "public"
		}
	]
}